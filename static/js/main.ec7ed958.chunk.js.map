{"version":3,"sources":["App.tsx","index.tsx"],"names":["pert","jsPERT","activities","getFillColor","nodeKey","START","END","criticalPath","indexOf","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","undefined","handleSelect","bind","assertThisInitialized","setState","activitiesParams","react_default","a","createElement","style","float","expectedTime","slack","earliestStartTimes","earliestFinishTimes","latestStartTimes","latestFinishTimes","_this2","pertProbability","renderSelected","react_vis_force","zoom","onDeselectNode","onSelectNode","event","node","id","simulationOptions","height","width","strength","collide","charge","keys","network","map","radius","fill","showLabel","key","concat","successors","successorKey","link","source","target","targetRadius","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"omCAUMA,EAAOC,IAAOC,GAEdC,EAAe,SAACC,EAAiBJ,GACrC,OAAII,IAAYC,SAASD,IAAYE,MAC5B,OAEFN,EAAKO,aAAaC,QAAQJ,IAAY,EAAI,MAAQ,SAsF5CK,cA7Eb,SAAAA,EAAYC,GAAuB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjCE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,cAAUC,GACzBT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAHaA,4EAMtBP,GACXU,KAAKU,SAAS,CAAEL,SAAUf,6CAI1B,OAAKU,KAAKI,MAAMC,UAAanB,EAAKyB,iBAAiBX,KAAKI,MAAMC,UAI5DO,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,MAAO,UAArB,kBACkBhB,KAAKI,MAAMC,SAC3BO,EAAAC,EAAAC,cAAA,WAFF,kBAGkB5B,EAAKyB,iBAAiBX,KAAKI,MAAMC,UAAUY,aAC3DL,EAAAC,EAAAC,cAAA,WAJF,UAKU5B,EAAKgC,MAAMlB,KAAKI,MAAMC,UAC9BO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAPF,mBAQmB5B,EAAKiC,mBAAmBnB,KAAKI,MAAMC,UACpDO,EAAAC,EAAAC,cAAA,WATF,oBAUoB5B,EAAKkC,oBAAoBpB,KAAKI,MAAMC,UACtDO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAZF,iBAaiB5B,EAAKmC,iBAAiBrB,KAAKI,MAAMC,UAChDO,EAAAC,EAAAC,cAAA,WAdF,kBAekB5B,EAAKoC,kBAAkBtB,KAAKI,MAAMC,UAClDO,EAAAC,EAAAC,cAAA,YAnBK,sCAwBF,IAAAS,EAAAvB,KACP,OACEY,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gDAAwCU,0BAAgBtC,EAAM,KADhE,gCAGGc,KAAKyB,iBACNb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACY,EAAA,sBAAD,CACEC,MAAI,EACJC,eAAgB,kBAAML,EAAKhB,gBAC3BsB,aAAc,SAACC,EAAYC,GAAb,OAA2BR,EAAKhB,aAAawB,EAAKC,KAChEC,kBAAmB,CACjBC,OAAQ,IACRC,MAAO,IACPC,SAAU,CAAEC,QAAS,IAAKC,OAAQ,KAGnCxC,OAAOyC,KAAKrD,EAAKsD,SAASC,IAAI,SAAAnD,GAAO,OACpCsB,EAAAC,EAAAC,cAACY,EAAA,eAAD,CACEK,KAAM,CAAEC,GAAI1C,EAASoD,OAAQ,IAC7BC,KAAMtD,EAAaC,EAASJ,GAC5B0D,WAAS,EACTC,IAAG,QAAAC,OAAUxD,OAGhBQ,OAAOyC,KAAKrD,EAAKsD,SAASC,IAAI,SAAAnD,GAAO,OACpCJ,EAAKsD,QAAQlD,GAASyD,WAAWN,IAAI,SAAAO,GAAY,OAC/CpC,EAAAC,EAAAC,cAACY,EAAA,oBAAD,CACEuB,KAAM,CAAEC,OAAQ5D,EAAS6D,OAAQH,GACjCI,aAAc,EACdP,IAAG,SAAAC,OAAWxD,EAAX,MAAAwD,OAAuBE,mBAnE1BK,aCnBlBC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.ec7ed958.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  InteractiveForceGraph,\n  ForceGraphNode,\n  ForceGraphArrowLink,\n} from 'react-vis-force';\nimport jsPERT, { pertProbability, START, END, Pert } from 'js-pert';\n\nimport activities from './activities.json';\n\nconst pert = jsPERT(activities);\n\nconst getFillColor = (nodeKey: string, pert: Pert) => {\n  if (nodeKey === START || nodeKey === END) {\n    return 'blue';\n  }\n  return pert.criticalPath.indexOf(nodeKey) > -1 ? 'red' : 'green';\n};\n\ninterface ComponentProps {}\ninterface StateProps {\n  selected?: string;\n}\n\nclass App extends Component<ComponentProps, StateProps> {\n  constructor(props: ComponentProps) {\n    super(props);\n    this.state = { selected: undefined };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(nodeKey?: string) {\n    this.setState({ selected: nodeKey });\n  }\n\n  renderSelected() {\n    if (!this.state.selected || !pert.activitiesParams[this.state.selected]) {\n      return null;\n    }\n    return (\n      <div style={{ float: 'right' }}>\n        Selected node: {this.state.selected}\n        <br />\n        Expected Time: {pert.activitiesParams[this.state.selected].expectedTime}\n        <br />\n        Slack: {pert.slack[this.state.selected]}\n        <br />\n        <br />\n        Earliest Start: {pert.earliestStartTimes[this.state.selected]}\n        <br />\n        Earliest Finish: {pert.earliestFinishTimes[this.state.selected]}\n        <br />\n        <br />\n        Latest Start: {pert.latestStartTimes[this.state.selected]}\n        <br />\n        Latest Finish: {pert.latestFinishTimes[this.state.selected]}\n        <br />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Probability to complete in 19 days: {pertProbability(pert, 19)}</p>\n        Click on the node for details\n        {this.renderSelected()}\n        <div>\n          <InteractiveForceGraph\n            zoom\n            onDeselectNode={() => this.handleSelect()}\n            onSelectNode={(event: any, node: any) => this.handleSelect(node.id)}\n            simulationOptions={{\n              height: 800,\n              width: 800,\n              strength: { collide: 127, charge: 5 },\n            }}\n          >\n            {Object.keys(pert.network).map(nodeKey => (\n              <ForceGraphNode\n                node={{ id: nodeKey, radius: 10 }}\n                fill={getFillColor(nodeKey, pert)}\n                showLabel\n                key={`node|${nodeKey}`}\n              />\n            ))}\n            {Object.keys(pert.network).map(nodeKey =>\n              pert.network[nodeKey].successors.map(successorKey => (\n                <ForceGraphArrowLink\n                  link={{ source: nodeKey, target: successorKey }}\n                  targetRadius={5}\n                  key={`arrow|${nodeKey}=>${successorKey}`}\n                />\n              ))\n            )}\n          </InteractiveForceGraph>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}