{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["pert","jsPERT","activities","getFillColor","nodeKey","START","END","criticalPath","indexOf","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","undefined","handleSelect","bind","assertThisInitialized","setState","activitiesParams","react_default","a","createElement","style","float","expectedTime","slack","earliestStartTimes","earliestFinishTimes","latestStartTimes","latestFinishTimes","_this2","pertProbability","renderSelected","react_vis_force","zoom","onDeselectNode","onSelectNode","event","node","id","simulationOptions","height","width","strength","collide","charge","keys","network","map","radius","fill","showLabel","key","concat","successors","successorKey","link","source","target","targetRadius","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1f86a77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  InteractiveForceGraph,\n  ForceGraphNode,\n  ForceGraphArrowLink,\n} from 'react-vis-force';\nimport jsPERT, { pertProbability, START, END, Pert } from 'js-pert';\n\nimport activities from './activities.json';\n\nconst pert = jsPERT(activities);\n\nconst getFillColor = (nodeKey: string, pert: Pert) => {\n  if (nodeKey === START || nodeKey === END) {\n    return 'blue';\n  }\n  return pert.criticalPath.indexOf(nodeKey) > -1 ? 'red' : 'green';\n};\n\ninterface ComponentProps {}\ninterface StateProps {\n  selected?: string;\n}\n\nclass App extends Component<ComponentProps, StateProps> {\n  constructor(props: ComponentProps) {\n    super(props);\n    this.state = { selected: undefined };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(nodeKey?: string) {\n    this.setState({ selected: nodeKey });\n  }\n\n  renderSelected() {\n    if (!this.state.selected || !pert.activitiesParams[this.state.selected]) {\n      return null;\n    }\n    return (\n      <div style={{ float: 'right' }}>\n        Selected node: {this.state.selected}\n        <br />\n        Expected Time: {pert.activitiesParams[this.state.selected].expectedTime}\n        <br />\n        Slack: {pert.slack[this.state.selected]}\n        <br />\n        <br />\n        Earliest Start: {pert.earliestStartTimes[this.state.selected]}\n        <br />\n        Earliest Finish: {pert.earliestFinishTimes[this.state.selected]}\n        <br />\n        <br />\n        Latest Start: {pert.latestStartTimes[this.state.selected]}\n        <br />\n        Latest Finish: {pert.latestFinishTimes[this.state.selected]}\n        <br />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Probability to complete in 19 days: {pertProbability(pert, 19)}</p>\n        Click on the node for details\n        {this.renderSelected()}\n        <div>\n          <InteractiveForceGraph\n            zoom\n            onDeselectNode={() => this.handleSelect()}\n            onSelectNode={(event: any, node: any) => this.handleSelect(node.id)}\n            simulationOptions={{\n              height: 800,\n              width: 800,\n              strength: { collide: 127, charge: 5 },\n            }}\n          >\n            {Object.keys(pert.network).map(nodeKey => (\n              <ForceGraphNode\n                node={{ id: nodeKey, radius: 10 }}\n                fill={getFillColor(nodeKey, pert)}\n                showLabel\n                key={`node|${nodeKey}`}\n              />\n            ))}\n            {Object.keys(pert.network).map(nodeKey =>\n              pert.network[nodeKey].successors.map(successorKey => (\n                <ForceGraphArrowLink\n                  link={{ source: nodeKey, target: successorKey }}\n                  targetRadius={5}\n                  key={`arrow|${nodeKey}=>${successorKey}`}\n                />\n              ))\n            )}\n          </InteractiveForceGraph>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}